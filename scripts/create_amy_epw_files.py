import os
import pandas as pd
import argparse
import diyepw

# Set path to outputs produced by this script.
create_out_path  = os.path.abspath(os.path.join('..', 'outputs', 'create_amy_epw_files_output'))

# Set path to where new EPW files should be saved.
amy_epw_file_out_path = os.path.join(create_out_path, 'epw')
if not os.path.exists(amy_epw_file_out_path):
    os.mkdir(amy_epw_file_out_path)

# Provide the path to the list of WMO stations for which new AMY EPW files should be created.
path_to_station_list = os.path.join('..', 'outputs', 'analyze_noaa_data_output', 'files_to_convert.csv')

epw_file_violations_path = os.path.join(create_out_path, 'epw_validation_errors.csv')
errors_path = os.path.join(create_out_path, 'errors.csv')

# Ensure that the errors file is truncated
with open(errors_path, 'w'):
    pass

parser = argparse.ArgumentParser(
    description=f"""
        Generate epw files based on the files generated by unpack_noaa_data.py and analyze_noaa_data.py, which must
        be called prior to this script. The generated files will be written to {amy_epw_file_out_path}. A list of
        any files that could not be generated due to validation or other errors will be written to {errors_path}.
    """
)
parser.add_argument('--max-records-to-interpolate',
                    default=6,
                    type=int,
                    help="""The maximum number of consecutive records to interpolate. See the documentation of the
                            pandas.DataFrame.interpolate() method's "limit" argument for more details. Basically,
                            if a sequence of fields up to the length defined by this argument are missing, those 
                            missing values will be interpolated linearly using the values of the fields immediately 
                            preceding and following the missing field(s). If a sequence of fields is longer than this
                            limit, then those fields' values will be imputed instead (see --max-records-to-impute)
                            """
)
parser.add_argument('--max-records-to-impute',
                    default=48,
                    type=int,
                    help=f"""The maximum number of records to impute. For groups of missing records larger than the
                            limit set by --max-records-to-interpolate but up to --max-records-to-impute, we replace the 
                            missing values using the average of the value two weeks prior and the value two weeks after 
                            the missing value. If there are more consecutive missing records than this limit, then the 
                            file will not be processed, and will be added to the error file at {errors_path}."""
)
args = parser.parse_args()

# Read in list of AMY files that should be used to create EPW files.
amy_file_list = pd.read_csv(path_to_station_list)
amy_file_list = amy_file_list[amy_file_list.columns[0]]

idx = 1
num_files = len(amy_file_list)
def handle_progress(amy_file_path):
    global idx, num_files
    print(f"Processing {amy_file_path} - file {idx} / {num_files}")
    idx += 1

amy_epw_files, errors = diyepw.convert_noaa_isd_lite_to_amy_epw_files(
    amy_file_list,
    progress_handler=handle_progress,
    max_records_to_interpolate=args.max_records_to_interpolate,
    max_records_to_impute=args.max_records_to_impute,
    output_dir=amy_epw_file_out_path
)

if not errors.empty:
    print(len(errors), f"files encountered errors - see {errors_path} for more information")
    errors.to_csv(errors_path, mode='w', index=False)

print(len(amy_epw_files), f'files successfully processed and written to {amy_epw_file_out_path}.')
